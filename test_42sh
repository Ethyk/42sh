[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;160mx[0m[31m[38;5;160mx[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[1;33m~[0m[31m[1;33m~[0m[31m[1;33m~[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[1;33m~[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m[31m[38;5;34m.[0m              

----------------------------------------------------------------

[37;1m42sh/globbing/brace-expansion/ascii-range/010-big-range[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that brace expansion may be performed with a big numeric range.[0m

  STDIN:
[38;5;239m  01: ./write_all_arguments_on_stdout {A..z}[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `^A@B@C@D@E@F@G@H@I@J@K@L@M@N@O@P@Q@R@S@T@U@V@W@X@Y@Z@.+@.?@.+@.+@_@.+@a@b@c@d@e@f@g@h@i@j@k@l@m@n@o@p@q@r@s@t@u@v@w@x@y@z@$`[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: =================================================================
  02: ==84487==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x60200002a892 at pc 0x00010403f811 bp 0x7fff5bc18460 sp 0x7fff5bc18458
  03: READ of size 1 at 0x60200002a892 thread T0
  04:     #0 0x10403f810 in parse_loop wordexp_posix.c:91
  05:     #1 0x10403f2e3 in word_expansion wordexp_posix.c:150
  06:     #2 0x10400662a in exec_cmd_suffix exec_simple_command.c:30
  07:     #3 0x104007238 in exec_simple_command exec_simple_command.c:124
  08:     #4 0x104002f35 in exec exec.c:39
  09:     #5 0x104003fe4 in exec_command exec_command.c:20
  10:     #6 0x104002f35 in exec exec.c:39
  11:     #7 0x10401feef in launch_process job_launch.c:58
  12:     #8 0x10402056d in launch_job job_launch.c:95
  13:     #9 0x1040060db in exec_pipeline exec_pipeline.c:80
  14:     #10 0x104002f35 in exec exec.c:39
  15:     #11 0x104003081 in exec_and_or exec_and_or.c:13
  16:     #12 0x104002f35 in exec exec.c:39
  17:     #13 0x1040043e7 in exec_complete_command exec_complete_command.c:45
  18:     #14 0x104002f35 in exec exec.c:39
  19:     #15 0x1040046a1 in exec_complete_commands exec_complete_commands.c:10
  20:     #16 0x104002f35 in exec exec.c:39
  21:     #17 0x104006319 in exec_program exec_program.c:10
  22:     #18 0x104002f35 in exec exec.c:39
  23:     #19 0x1040013b5 in exec_main_loop lex_and_parse.c:18
  24:     #20 0x104001b89 in lex_and_parse lex_and_parse.c:79
  25:     #21 0x1040023ae in main_loop main_loop.c:72
  26:     #22 0x103fe7cdb in main main.c:69
  27:     #23 0x7fffc0cac234 in start (libdyld.dylib:x86_64+0x5234)
  28: 
  29: 0x60200002a892 is located 0 bytes to the right of 2-byte region [0x60200002a890,0x60200002a892)
  30: allocated by thread T0 here:
  31:     #0 0x1041c8ffc in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64+0x55ffc)
  32:     #1 0x104049dff in ft_memalloc ft_memalloc.c:17
  33:     #2 0x10404f65c in ft_strnew ft_strnew.c:8
  34:     #3 0x10404ea09 in ft_strjoin3_free ft_strjoin3_free.c:26
  35:     #4 0x10400ea64 in curly_brackets_range_alpha curly_brackets_range.c:18
  36:     #5 0x10400f56f in curly_brackets_range curly_brackets_range.c:71
  37:     #6 0x10400d5f7 in curly_brackets curly_brackets.c:124
  38:     #7 0x10400dc86 in expand_curly_brackets curly_brackets.c:136
  39:     #8 0x10403f564 in brace_expension wordexp_posix.c:69
  40:     #9 0x10403f235 in word_expansion wordexp_posix.c:146
  41:     #10 0x10400662a in exec_cmd_suffix exec_simple_command.c:30
  42:     #11 0x104007238 in exec_simple_command exec_simple_command.c:124
  43:     #12 0x104002f35 in exec exec.c:39
  44:     #13 0x104003fe4 in exec_command exec_command.c:20
  45:     #14 0x104002f35 in exec exec.c:39
  46:     #15 0x10401feef in launch_process job_launch.c:58
  47:     #16 0x10402056d in launch_job job_launch.c:95
  48:     #17 0x1040060db in exec_pipeline exec_pipeline.c:80
  49:     #18 0x104002f35 in exec exec.c:39
  50:     #19 0x104003081 in exec_and_or exec_and_or.c:13
  51:     #20 0x104002f35 in exec exec.c:39
  52:     #21 0x1040043e7 in exec_complete_command exec_complete_command.c:45
  53:     #22 0x104002f35 in exec exec.c:39
  54:     #23 0x1040046a1 in exec_complete_commands exec_complete_commands.c:10
  55:     #24 0x104002f35 in exec exec.c:39
  56:     #25 0x104006319 in exec_program exec_program.c:10
  57:     #26 0x104002f35 in exec exec.c:39
  58:     #27 0x1040013b5 in exec_main_loop lex_and_parse.c:18
  59:     #28 0x104001b89 in lex_and_parse lex_and_parse.c:79
  60:     #29 0x1040023ae in main_loop main_loop.c:72
  61: 
  62: SUMMARY: AddressSanitizer: heap-buffer-overflow wordexp_posix.c:91 in parse_loop
  63: Shadow bytes around the buggy address:
  64:   0x1c04000054c0: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  65:   0x1c04000054d0: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  66:   0x1c04000054e0: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  67:   0x1c04000054f0: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  68:   0x1c0400005500: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  69: =>0x1c0400005510: fa fa[02]fa fa fa fd fd fa fa 02 fa fa fa fd fd
  70:   0x1c0400005520: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  71:   0x1c0400005530: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  72:   0x1c0400005540: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  73:   0x1c0400005550: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  74:   0x1c0400005560: fa fa 02 fa fa fa fd fd fa fa 02 fa fa fa fd fd
  75: Shadow byte legend (one shadow byte represents 8 application bytes):
  76:   Addressable:           00
  77:   Partially addressable: 01 02 03 04 05 06 07 
  78:   Heap left redzone:       fa
  79:   Freed heap region:       fd
  80:   Stack left redzone:      f1
  81:   Stack mid redzone:       f2
  82:   Stack right redzone:     f3
  83:   Stack after return:      f5
  84:   Stack use after scope:   f8
  85:   Global redzone:          f9
  86:   Global init order:       f6
  87:   Poisoned by user:        f7
  88:   Container overflow:      fc
  89:   Array cookie:            ac
  90:   Intra object redzone:    bb
  91:   ASan internal:           fe
  92:   Left alloca redzone:     ca
  93:   Right alloca redzone:    cb
  94: ==84487==ABORTING[0m

----------------------------------------------------------------

[37;1m42sh/globbing/brace-expansion/list-of-values/002-simple-test-1[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that brace expansion is processed when at least one comma `,` is encountered.[0m

  STDIN:
[38;5;239m  01: ./write_all_arguments_on_stdout {TOKEN201711151822_A,TOKEN201711151822_B}[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `^TOKEN201711151822_A@TOKEN201711151822_B@$`[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: =================================================================
  02: ==85126==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000024ae9 at pc 0x0001076a7a4d bp 0x7fff5857e230 sp 0x7fff5857e228
  03: READ of size 1 at 0x603000024ae9 thread T0
  04:     #0 0x1076a7a4c in get_start_bracket curly_brackets.c:88
  05:     #1 0x1076a74bc in curly_brackets curly_brackets.c:113
  06:     #2 0x1076a73e6 in curly_brackets_coma curly_brackets.c:15
  07:     #3 0x1076a762f in curly_brackets curly_brackets.c:126
  08:     #4 0x1076a7c86 in expand_curly_brackets curly_brackets.c:136
  09:     #5 0x1076d9564 in brace_expension wordexp_posix.c:69
  10:     #6 0x1076d9235 in word_expansion wordexp_posix.c:146
  11:     #7 0x1076a062a in exec_cmd_suffix exec_simple_command.c:30
  12:     #8 0x1076a1238 in exec_simple_command exec_simple_command.c:124
  13:     #9 0x10769cf35 in exec exec.c:39
  14:     #10 0x10769dfe4 in exec_command exec_command.c:20
  15:     #11 0x10769cf35 in exec exec.c:39
  16:     #12 0x1076b9eef in launch_process job_launch.c:58
  17:     #13 0x1076ba56d in launch_job job_launch.c:95
  18:     #14 0x1076a00db in exec_pipeline exec_pipeline.c:80
  19:     #15 0x10769cf35 in exec exec.c:39
  20:     #16 0x10769d081 in exec_and_or exec_and_or.c:13
  21:     #17 0x10769cf35 in exec exec.c:39
  22:     #18 0x10769e3e7 in exec_complete_command exec_complete_command.c:45
  23:     #19 0x10769cf35 in exec exec.c:39
  24:     #20 0x10769e6a1 in exec_complete_commands exec_complete_commands.c:10
  25:     #21 0x10769cf35 in exec exec.c:39
  26:     #22 0x1076a0319 in exec_program exec_program.c:10
  27:     #23 0x10769cf35 in exec exec.c:39
  28:     #24 0x10769b3b5 in exec_main_loop lex_and_parse.c:18
  29:     #25 0x10769bb89 in lex_and_parse lex_and_parse.c:79
  30:     #26 0x10769c3ae in main_loop main_loop.c:72
  31:     #27 0x107681cdb in main main.c:69
  32:     #28 0x7fffc0cac234 in start (libdyld.dylib:x86_64+0x5234)
  33: 
  34: 0x603000024ae9 is located 21 bytes to the right of 20-byte region [0x603000024ac0,0x603000024ad4)
  35: allocated by thread T0 here:
  36:     #0 0x107861ffc in wrap_malloc (libclang_rt.asan_osx_dynamic.dylib:x86_64+0x55ffc)
  37:     #1 0x1076e3dff in ft_memalloc ft_memalloc.c:17
  38:     #2 0x1076e965c in ft_strnew ft_strnew.c:8
  39:     #3 0x1076e8a09 in ft_strjoin3_free ft_strjoin3_free.c:26
  40:     #4 0x1076a73cf in curly_brackets_coma curly_brackets.c:16
  41:     #5 0x1076a762f in curly_brackets curly_brackets.c:126
  42:     #6 0x1076a7c86 in expand_curly_brackets curly_brackets.c:136
  43:     #7 0x1076d9564 in brace_expension wordexp_posix.c:69
  44:     #8 0x1076d9235 in word_expansion wordexp_posix.c:146
  45:     #9 0x1076a062a in exec_cmd_suffix exec_simple_command.c:30
  46:     #10 0x1076a1238 in exec_simple_command exec_simple_command.c:124
  47:     #11 0x10769cf35 in exec exec.c:39
  48:     #12 0x10769dfe4 in exec_command exec_command.c:20
  49:     #13 0x10769cf35 in exec exec.c:39
  50:     #14 0x1076b9eef in launch_process job_launch.c:58
  51:     #15 0x1076ba56d in launch_job job_launch.c:95
  52:     #16 0x1076a00db in exec_pipeline exec_pipeline.c:80
  53:     #17 0x10769cf35 in exec exec.c:39
  54:     #18 0x10769d081 in exec_and_or exec_and_or.c:13
  55:     #19 0x10769cf35 in exec exec.c:39
  56:     #20 0x10769e3e7 in exec_complete_command exec_complete_command.c:45
  57:     #21 0x10769cf35 in exec exec.c:39
  58:     #22 0x10769e6a1 in exec_complete_commands exec_complete_commands.c:10
  59:     #23 0x10769cf35 in exec exec.c:39
  60:     #24 0x1076a0319 in exec_program exec_program.c:10
  61:     #25 0x10769cf35 in exec exec.c:39
  62:     #26 0x10769b3b5 in exec_main_loop lex_and_parse.c:18
  63:     #27 0x10769bb89 in lex_and_parse lex_and_parse.c:79
  64:     #28 0x10769c3ae in main_loop main_loop.c:72
  65:     #29 0x107681cdb in main main.c:69
  66: 
  67: SUMMARY: AddressSanitizer: heap-buffer-overflow curly_brackets.c:88 in get_start_bracket
  68: Shadow bytes around the buggy address:
  69:   0x1c0600004900: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  70:   0x1c0600004910: fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fa
  71:   0x1c0600004920: fa fa fd fd fd fa fa fa fd fd fd fa fa fa fd fd
  72:   0x1c0600004930: fd fa fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  73:   0x1c0600004940: fd fd fd fd fa fa 00 00 00 fa fa fa 00 00 04 fa
  74: =>0x1c0600004950: fa fa 00 00 04 fa fa fa 00 00 04 fa fa[fa]fa fa
  75:   0x1c0600004960: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  76:   0x1c0600004970: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  77:   0x1c0600004980: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  78:   0x1c0600004990: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  79:   0x1c06000049a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  80: Shadow byte legend (one shadow byte represents 8 application bytes):
  81:   Addressable:           00
  82:   Partially addressable: 01 02 03 04 05 06 07 
  83:   Heap left redzone:       fa
  84:   Freed heap region:       fd
  85:   Stack left redzone:      f1
  86:   Stack mid redzone:       f2
  87:   Stack right redzone:     f3
  88:   Stack after return:      f5
  89:   Stack use after scope:   f8
  90:   Global redzone:          f9
  91:   Global init order:       f6
  92:   Poisoned by user:        f7
  93:   Container overflow:      fc
  94:   Array cookie:            ac
  95:   Intra object redzone:    bb
  96:   ASan internal:           fe
  97:   Left alloca redzone:     ca
  98:   Right alloca redzone:    cb
  99: ==85126==ABORTING[0m

----------------------------------------------------------------

[37;1m42sh/globbing/brace-expansion/list-of-values/003-simple-test-2[0m [31m[38;5;160m(FAILED)[0m

  Description:
[38;5;239m  The purpose of this test is to check that brace expansion is processed with a list of three patterns.[0m

  STDIN:
[38;5;239m  01: ./write_all_arguments_on_stdout {TOKEN201711151822_A,TOKEN201711151822_B,TOKEN201711151822_C}[0m

  STDOUT:
[31m[38;5;160m  FAILURE    expected_to match_regex `^TOKEN201711151822_A@TOKEN201711151822_B@TOKEN201711151822_C@$`[0m
[38;5;239m  (no output)[0m

  STDERR:
[31m[38;5;160m  FAILURE    expected_to be_empty[0m
[38;5;239m  01: =================================================================
  02: ==85239==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x603000024b2d at pc 0x0001002b4a4d bp 0x7fff5f971230 sp 0x7fff5f971228
  03: READ of size 1 at 0x603000024b2d thread T0
  04:     #0 0x1002b4a4c in get_start_bracket curly_brackets.c:88
  05:     #1 0x1002b44bc in curly_brackets curly_brackets.c:113
  06:     #2 0x1002b43e6 in curly_brackets_coma curly_brackets.c:15
  07:     #3 0x1002b462f in curly_brackets curly_brackets.c:126
  08:     #4 0x1002b4c86 in expand_curly_brackets curly_brackets.c:136
  09:     #5 0x1002e6564 in brace_expension wordexp_posix.c:69
  10:     #6 0x1002e6235 in word_expansion wordexp_posix.c:146
  11:     #7 0x1002ad62a in exec_cmd_suffix exec_simple_command.c:30
  12:     #8 0x1002ae238 in exec_simple_command exec_simple_command.c:124
  13:     #9 0x1002a9f35 in exec exec.c:39
  14:     #10 0x1002aafe4 in exec_command exec_command.c:20
  15:     #11 0x1002a9f35 in exec exec.c:39
  16:     #12 0x1002c6eef in launch_process job_launch.c:58
  17:     #13 0x1002c756d in launch_job job_launch.c:95
  18:     #14 0x1002ad0db in exec_pipeline exec_pipeline.c:80
  19:     #15 0x1002a9f35 in exec exec.c:39
  20:     #16 0x1002aa081 in exec_and_or exec_and_or.c:13
  21:     #17 0x1002a9f35 in exec exec.c:39
  22:     #18 0x1002ab3e7 in exec_complete_command exec_complete_command.c:45
  23:     #19 0x1002a9f35 in exec exec.c:39
  24:     #20 0x1002ab6a1 in exec_complete_commands exec_complete_commands.c:10
  25:     #21 0x1002a9f35 in exec exec.c:39
  26:     #22 0x1002ad319 in exec_program exec_program.c:10
  27:     #23 0x1002a9f35 in exec exec.c:39
  28:     #24 0x1002a83b5 in exec_main_loop lex_and_parse.c:18
  29:     #25 0x1002a8b89 in lex_and_parse lex_and_parse.c:79
  30:     #26 0x1002a93ae in main_loop main_loop.c:72
  31:     #27 0x10028ecdb in main main.c:69
  32:     #28 0x7fffc0cac234 in start (libdyld.dylib:x86_64+0x5234)
  33: 
  34: Address 0x603000024b2d is a wild pointer.
  35: SUMMARY: AddressSanitizer: heap-buffer-overflow curly_brackets.c:88 in get_start_bracket
  36: Shadow bytes around the buggy address:
  37:   0x1c0600004910: fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fa
  38:   0x1c0600004920: fa fa fd fd fd fa fa fa fd fd fd fa fa fa fd fd
  39:   0x1c0600004930: fd fa fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  40:   0x1c0600004940: fd fd fd fd fa fa 00 00 00 00 fa fa 00 00 04 fa
  41:   0x1c0600004950: fa fa 00 00 04 fa fa fa 00 00 04 fa fa fa 00 00
  42: =>0x1c0600004960: 04 fa fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa
  43:   0x1c0600004970: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  44:   0x1c0600004980: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  45:   0x1c0600004990: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  46:   0x1c06000049a0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  47:   0x1c06000049b0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  48: Shadow byte legend (one shadow byte represents 8 application bytes):
  49:   Addressable:           00
  50:   Partially addressable: 01 02 03 04 05 06 07 
  51:   Heap left redzone:       fa
  52:   Freed heap region:       fd
  53:   Stack left redzone:      f1
  54:   Stack mid redzone:       f2
  55:   Stack right redzone:     f3
  56:   Stack after return:      f5
  57:   Stack use after scope:   f8
  58:   Global redzone:          f9
  59:   Global init order:       f6
  60:   Poisoned by user:        f7
  61:   Container overflow:      fc
  62:   Array cookie:            ac
  63:   Intra object redzone:    bb
  64:   ASan internal:           fe
  65:   Left alloca redzone:     ca
  66:   Right alloca redzone:    cb
  67: ==85239==ABORTING[0m

----------------------------------------------------------------

[37;1m42sh/globbing/bracket-expansion/multi/004-simple-bracket+char+range[0m [31m[1;33m(WARNING)[0m

  Description:
[38;5;239m  The purpose of this test is to control if 2 patterns splited by a minus characters can be match.[0m

  Before test:
[38;5;239m  01: rm -rf "./test_globbing"
  02: mkdir "./test_globbing"
  03: cd "./test_globbing"
  04: touch 'a-0' 'a-1' 'a-2' 'b-0' 'b-1' 'b-2' 'Z-0' 'Z-1' 'Z-2' 'a1' 'Z9' 'D4'[0m

  STDIN:
[38;5;239m  01: /Users/vcombey/42ShellTester/tmp/write_all_arguments_on_stdout [aZ]-[1-9][0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to match_regex `a-1@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `a-2@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `Z-1@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `Z-2@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `a-0@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `b-0@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `b-1@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `b-2@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `a1@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `Z9@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `D4@`[0m
[31m[1;33m  WARNING    might match_regex `^Z-1@Z-2@a-1@a-2@$`[0m
[38;5;239m  01: a-1@a-2@Z-1@Z-2@[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

----------------------------------------------------------------

[37;1m42sh/globbing/bracket-expansion/not/001-simple-opposit-match[0m [31m[1;33m(WARNING)[0m

  Description:
[38;5;239m  The purpose of this test is to check that the brackets expansion works with the inversion mark `!` or `^`. The expected behavior is the reversion of the following pattern.[0m

  Before test:
[38;5;239m  01: rm -rf "./test_globbing"
  02: mkdir "./test_globbing"
  03: cd "./test_globbing"
  04: touch 'a' '1' 'Z' 'd' 'e' 'f' 'def'[0m

  STDIN:
[38;5;239m  01: /Users/vcombey/42ShellTester/tmp/write_all_arguments_on_stdout [!a1Z]
  02: /Users/vcombey/42ShellTester/tmp/write_all_arguments_on_stdout [^a1Z][0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to match_regex `d@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `e@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `f@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `def@`[0m
[31m[1;33m  WARNING    might match_regex `^d@e@f@$`[0m
[38;5;239m  01: .@d@e@f@
  02: 1@a@Z@[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

----------------------------------------------------------------

[37;1m42sh/globbing/bracket-expansion/not/002-simple-opposite-range[0m [31m[1;33m(WARNING)[0m

  Description:
[38;5;239m  The purpose of this test is to check that the brackets expansion works with the inversion mark `!` or `^`. The expected behavior is the reversion of the following pattern.[0m

  Before test:
[38;5;239m  01: rm -rf "./test_globbing"
  02: mkdir "./test_globbing"
  03: cd "./test_globbing"
  04: touch 'a' 'b' 'c' 'z' '1' '2' '3' '42'[0m

  STDIN:
[38;5;239m  01: /Users/vcombey/42ShellTester/tmp/write_all_arguments_on_stdout [!a-z]
  02: /Users/vcombey/42ShellTester/tmp/write_all_arguments_on_stdout [^a-z][0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to match_regex `1@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `2@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `3@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `42@`[0m
[31m[1;33m  WARNING    might match_regex `^1@2@3@$`[0m
[38;5;239m  01: .@1@2@3@
  02: a@b@c@z@[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

----------------------------------------------------------------

[37;1m42sh/globbing/bracket-expansion/range-pattern/004-ascii-range-2[0m [31m[1;33m(WARNING)[0m

  Description:
[38;5;239m  The purpose of this test is to check that the brackets expansion works with the following pattern `[1-z]`.[0m

  Before test:
[38;5;239m  01: rm -rf "./test_globbing"
  02: mkdir "./test_globbing"
  03: cd "./test_globbing"
  04: touch '2' 'a' 'B' 'c' 'Z' ']' '[' '[1-z]' '1-z' '-'[0m

  STDIN:
[38;5;239m  01: /Users/vcombey/42ShellTester/tmp/write_all_arguments_on_stdout [1-z][0m

  STDOUT:
[31m[38;5;34m  SUCCESS    expected_to match_regex `2@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `a@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `B@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `c@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `Z@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `]@`[0m
[31m[38;5;34m  SUCCESS    expected_to match_regex `[[]@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `-@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `1-z@`[0m
[31m[38;5;34m  SUCCESS    expected_to_not match_regex `[[]1-z]@`[0m
[31m[1;33m  WARNING    might match_regex `^2@B@Z@[[]@]@a@c@$`[0m
[38;5;239m  01: 2@[@]@a@B@c@Z@[0m

  STDERR:
[31m[38;5;34m  SUCCESS    expected_to be_empty[0m
[38;5;239m  (no output)[0m

Total tests: 72
Total failed tests: 3
Total pending tests: 0
