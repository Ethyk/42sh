Attempt at BNF grammar (BNF doesnt look like this on wikipedia tho ... )

token	: word
		| quote
		| dquote
		| 
word	: ar_expand
		| cmd_subst
		;
word	: 'a'
		| 'b'
		| 'c'
		| 'd'
		| 'e'
		| 'f'
		| 'g'
		| 'h'
		| 'i'
		| 'j'
		| 'k'
		| 'l'
		| 'm'
		| 'n'
		| 'o'
		| 'p'
		| 'q'
		| 'r'
		| 's'
		| 't'
		| 'u'
		| 'v'
		| 'w'
		| 'x'
		| 'y'
		| 'z'
		| '_'
		;
cmd_subst : '$'( 

Option 1) If input is more than one char, it means I plan on using a look ahead
Option 2) Use a counter, counting how many symbol have passed since the moment i pushed the symbol on the stack

State \ Input,	$ 	$(	$((
def,			.
word,			.
op, 			.
dquote,			.
cmd_subst,		.
ar_expand,		.
tild_expand,	.
quote,			.
bs,				.
comment,		.
whitespace,		.
param_expand,	.

while (not_done)
{
	while (*state != g_state_table.state)
	{
		++g_state_table;
	}
	if (g_state_table)
		f_state_table.func();
}

if (*state == def)
{
	if (*input == 0)
		*state = INPUT_END or pop_state();
	if (*input == [a-zA-Z_0-9\-])
		*state = WORD;
	if (*input == [&><|;])
		*state = OPERATOR;
	if (*input == $)
		*state = PARAM_EXPAND;
	if (*input == `)
		*state = CMD_SUBST
	if (*input == [ 	])
		*state = whitespace;
}
