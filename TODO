# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    TODO                                               :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: ade-sede <adrien.de.sede@gmail.com>        +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2017/04/21 23:17:42 by ade-sede          #+#    #+#              #
#    Updated: 2017/05/02 13:46:44 by ade-sede         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#################################
#				#
# 	TODO	 		#
#				#
#################################

LINKS		:	

			# DOC LIST ON 42's FORUM
			https://forum.intra.42.fr/topics/16416/messages

			# POSIX STANDARDS ON SHELL GRAMAR AND BASIC BEHAVIOR
			http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html

			# 42SH's SUBJECT
			https://cdn.intra.42.fr/pdf/pdf/183/42sh.fr.pdf

			# 21SH's SUBJECT
			https://cdn.intra.42.fr/pdf/pdf/468/21sh.fr.pdf
			
			# MINISHELL's SUBJECT
			https://cdn.intra.42.fr/pdf/pdf/107/minishell.fr.pdf

			# TERMCAPS FRIENDLY DOC
			http://loiclefloch.fr/877-les-termcaps/

			# HOSTILE TERMCAPS DOC // RUN
			https://www.gnu.org/software/termutils/manual/termcap-1.3/html_mono/termcap.html

KEYWORDS	:	split and glob - completion - AST - lexer parser

#################################
#				#
# 	NOTE	 		#
#				#
#################################

	1)	SHLVL is the shell level. Shows how many time a shell has been
			nested. The very first shell has SHLVL = 1


	2)	List of vars that should be init with **environ:

			PATH // optional, if env -i path is nul. but we could assume /usr/bin
			SHLVL
			PWD // Maybe we do an opendir . and check it ?
			_: // Last used command

	3)	If i need to edit env->environ ?
			Use ft_realloc

	4)	The fcts that runs all the programs should have a pointer to
			the environ to use

#################################
#				#
#	LEXER PARSER		#
#				#
#################################

LINKS		:	# PARSING
			https://en.wikipedia.org/wiki/Parsing
			
			# LEXICA ANALYSIS
			https://en.wikipedia.org/wiki/Lexical_analysis

			# PARSE TREE
			https://en.wikipedia.org/wiki/Parse_tree

			# TOKENIZER IN C SHARP
			http://onoffswitch.net/building-a-custom-lexer/

			# PARSER IN C SHARP
			http://onoffswitch.net/a-handrolled-language-parser/


#################################
#				#
# 	FCTS DRAFT 		#
#				#
#################################

# This is a simple draft for the fonctions that might be needed

		1)	A fonction that would return us the index of one key=value
				string in env->environ. 
			
			ssize_t		get_var_index(char *key, char **environ){
					i = 0;
					while (strncmp(key, environ[i], len(key)))		
						i++;
					return i;
			}

			IDEAS 1 -> Give an empty string to the function
			that would be filled with the value of the key. and an
			int that would contain the pos len of the key + the "="
			sign. Would give us the start of the value field

			IDEAS 2 -> Keep all of that in a struct ?


#################################
#				#
#	 PLAN			#
#				#
#################################


{{{ int	main()
	{{{ Initializ the full environement

		Create then fill.
		{{{ Create t_env *env
			struct s_env
			{
				char	**environ;
				size_t	environ_size;
				char	**path;
				size_t	path_size;
			}
		}}}
			{{{ Fill env->environ with a copy of extern char **environ

				A function should return **char and we assign that to environ.
			}}}
			{{{ Fill env->path
			}}}
			Init termcaps{{{
			}}}
	}}} 

	{{{ Main shell loop
		Print prompt {{{
		}}}
		Edit line {{{
			Termcaps
		}}}
		{{{ Get_next_line on 0
		}}}
	Lexer {{{
		Tokenizer {{{
		}}}
		Recognize the tokens (match keywords, brackets, etc etc) {{{
		}}}
		Check the global grammar {{{
		}}}
	}}}
		Parser{{{
		}}}
		{{{ Send into execute
		}}}
	}}}

	{{{ Clean up
	}}}
}}}
