#ifndef AUTOMATON_H
# define AUTOMATON_H
#include "libft.h"
#include "t_token.h"

//int	acc = 10000;
/* enum e_token { */
/* 	TK_PLUS, */
/* 	$, */
/* 	TK_STAR, */
/* 	TK_OPEN, */
/* 	TK_CLOSE, */
/* 	TK_ID, */
/* }; */

enum shift {
	s0,
	s1,
	s2,
	s3,
	s4,
	s5,
	s6,
	s7,
	s8,
	s9,
	s10,
	s11,
	s12,
	s13,
	s14,
	s15,
	s16,
	s17,
	s18,
	s19,
	s20,
	s21,
	s22,
	s23,
	s24,
	s25,
	s26,
	s27,
	s28,
	s29,
	s30,
	s31,
	s32,
	s33,
	s34,
	s35,
	s36,
	s37,
	s38,
	s39,
	s40,
	s41,
	s42,
	s43,
	s44,
	s45,
	s46,
	s47,
	s48,
	s49,
	s50,
	s51,
	s52,
	s53,
	s54,
	s55,
	s56,
	s57,
	s58,
	s59,
	s60,
	s61,
	s62,
	s63,
	s64,
	s65,
	s66,
	s67,
	s68,
	s69,
	s70,
	s71,
	s72,
	s73,
	s74,
	s75,
	s76,
	s77,
	s78,
	s79,
	s80,
	s81,
	s82,
	s83,
	s84,
	s85,
	s86,
	s87,
	s88,
	s89,
	s90,
	s91,
	s92,
	s93,
	s94,
	s95,
	s96,
	s97,
	s98,
	s99,
	s100,
	s101,
	s102,
	s103,
	s104,
	s105,
	s106,
	s107,
	s108,
	s109,
	s110,
	s111,
	// Start of recently added
	s123,
	s135,
	s136,
	s139,
	s140,
	s141,
	s145,
	s153,
	s148,
	s154,
	s152,
	s158,
	s161,
	s162,
	s163,
	s165,
	s168,
	s169,
	s171,
	s172,
	s178,
	s179,
	r0 = 4242,
	r1,
	r2,
	r3,
	r4,
	r5,
	r6,
	r7,
	r8,
	r9,
	r10,
	r11,
	r12,
	r13,
	r14,
	r15,
	r16,
	r17,
	r18,
	r19,
	r20,
	r21,
	r22,
	r23,
	r24,
	r25,
	r26,
	r27,
	r28,
	r29,
	r30,
	r31,
	r32,
	r33,
	r34,
	r35,
	r36,
	r37,
	r38,
	r39,
	r40,
	r41,
	r42,
	r43,
	r44,
	r45,
	r46,
	r47,
	r48,
	r49,
	r50,
	r51,
	r52,
	r53,
	r54,
	r55,
	r56,
	r57,
	r58,
	r59,
	r60,
	r61,
	r62,
	r63,
	r64,
	r65,
	r66,
	r67,
	r68,
	r69,
	r70,
	r71,
	r72,
	r73,
	r74,
	r75,
	r76,
	r77,
	r78,
	r79,
	r80,
	r81,
	r82,
	r83,
	r84,
	r85,
	r86,
	r87,
	r88,
	r89,
	r90,
	r91,
	r92,
	r93,
	r94,
	r95,
	r96,
	r97,
	r98,
	r99,
	r100,
	r101,
	r102,
	r103,
	r104,
	r105,
	r106,
	r107,
	r108,
	r109,
	r110,
	r111,
	r112,
	r113,
	r114,
	r115,
	r116,
	r117,
	r118,
	r119,
	r120,
	r121,
	r122,
	r123,
	r124,
	r125,
	r126,
	r127,
	r128,
	r129,
	r130,
	r131,
	r132,
	r133,
	r134,
	r135,
	r136,
	r137,
	r138,
	r139,
	r140,
	r141,
	r142,
	r143,
	r144,
	r145,
	r146,
	r147,
	r148,
	r149,
	r150,
	r151,
	r152,
	r153,
	r154,
	r155,
	r156,
	r157,
	r158,
	r159,
	r160,
	r161,
	r162,
	r163,
	r164,
	r165,
	r166,
	r167,
	r168,
	r169,
	r170,
	r171,
	r172,
	r173,
	r174,
	r175,
	r176,
	r177,
	r178,
	r179,
	r180,
	r181,
	r182,
};

typedef struct			s_ast
{
	struct s_ast	*child[7];
	int				symbol;
	t_token			*token;
}						t_ast;

enum e_symbol {
	PROGRAM,
	COMPLETE_COMMANDS,
	COMPLETE_COMMAND,
	LIST,
	AND_OR,
	PIPELINE,
	PIPE_SEQUENCE,
	COMMAND,
	COMPOUND_COMMAND,
	SUBSHELL,
	COMPOUND_LIST,
	TERM,
	FOR_CLAUSE,
	NAME,
	IN,
	WORDLIST,
	CASE_CLAUSE,
	CASE_LIST_NS,
	CASE_LIST,
	CASE_ITEM_NS,
	CASE_ITEM,
	PATTERN,
	IF_CLAUSE,
	ELSE_PART,
	WHILE_CLAUSE,
	UNTIL_CLAUSE,
	FUNCTION_DEFINITION,
	FUNCTION_BODY,
	FNAME,
	BRACE_GROUP,
	DO_GROUP,
	SIMPLE_COMMAND,
	CMD_PREFIX,
	CMD_SUFFIX,
	CMD_NAME,
	CMD_WORD,
	REDIRECT_LIST,
	IO_REDIRECT,
	IO_FILE,
	FILENAME,
	IO_HERE,
	HERE_END,
	NEWLINE_LIST,
	LINEBREAK,
	SEPARATOR_OP,
	SEPARATOR,
	SEQUENTIAL_SEP,
};

typedef struct s_rule
{
	enum e_symbol	symbol;	
	int				nb_child;
}				t_rule;

int			get_action(t_token *token, int state);
t_ast		*new_ast(t_token *token, int symbol);
int			get_goto(t_listint *state_stack, int reduce_rule);
void		reduce(t_listint **state_stack, t_list **ast_stack, int reduce_rule);
int			parse(t_ast **ast, t_list *token_list);
void		ast_print(t_ast *root, void (printer) (void *));
#endif
